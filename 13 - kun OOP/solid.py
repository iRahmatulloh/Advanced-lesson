from abc import ABC, abstractmethodfrom dataclasses import dataclassfrom time import sleep@dataclass()class TalimMarkazi(ABC):    def __init__(self, KursTuri):        self.kurs = KursTuri    @abstractmethod    def balanss(self):        pass@dataclass()class Dasturlash(TalimMarkazi, ABC):    def __init__(self, during_lesson: int):        super().__init__(KursTuri='Dasturlash')        self.during_lesson = during_lesson        self.price = 750_000    def balans(self):        return self.during_lesson * self.price@dataclass()class ENglish(TalimMarkazi, ABC):    def __init__(self, during_lesson: int, how_much_was):        super().__init__(KursTuri='English')        self.during_lesson = during_lesson        self.price = 700_000        self.how_much_was = how_much_was    def balans(self):        return f'Kursning umumiy summasi: {self.during_lesson * self.price}, siz esa {self.how_much_was * self.price} to`ladingiz'@dataclass()class Matematika(TalimMarkazi, ABC):    def __init__(self, during_lesson: int, how_much_was: int):        super().__init__(KursTuri='Matematika')        self.during_lesson = during_lesson        self.price = 400_000        self.how_much_was = how_much_was    def balans(self):        return f'Kursning umumiy summasi: {self.during_lesson * self.price}, siz esa {self.how_much_was * self.price} to`ladingiz'Avaz = Matematika(24, 7)print(f'Avaz -> {Avaz.balans()}')  # oylik summasleep(0.5)Davriyor = ENglish(9, how_much_was=8)print(f'Davriyor -> {Davriyor.balans()}')sleep(0.5)Sardor = Dasturlash(10)print(f'Sardor -> {Sardor.balans()}')